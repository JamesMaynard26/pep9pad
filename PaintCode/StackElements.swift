//
//  StackElements.swift
//  ProjectName
//
//  Created by AuthorName on 3/9/17.
//  Copyright Â© 2017 CompanyName. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import UIKit

public class StackElements : NSObject {

    //// Drawing Methods

    public dynamic class func drawStackBottomLines(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 40, height: 20), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 40, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 40, y: resizedFrame.height / 20)


        //// Bottom Drawing
        let bottomPath = UIBezierPath()
        bottomPath.move(to: CGPoint(x: 0, y: 0))
        bottomPath.addLine(to: CGPoint(x: 40, y: 0))
        UIColor.black.setStroke()
        bottomPath.lineWidth = 1
        bottomPath.stroke()


        //// Bottom 2 Drawing
        let bottom2Path = UIBezierPath()
        bottom2Path.move(to: CGPoint(x: 0.52, y: 3.57))
        bottom2Path.addLine(to: CGPoint(x: 4.47, y: 0))
        UIColor.black.setStroke()
        bottom2Path.lineWidth = 1
        bottom2Path.stroke()


        //// Bottom 3 Drawing
        let bottom3Path = UIBezierPath()
        bottom3Path.move(to: CGPoint(x: 5.52, y: 3.57))
        bottom3Path.addLine(to: CGPoint(x: 9.47, y: 0))
        UIColor.black.setStroke()
        bottom3Path.lineWidth = 1
        bottom3Path.stroke()


        //// Bottom 4 Drawing
        let bottom4Path = UIBezierPath()
        bottom4Path.move(to: CGPoint(x: 10.52, y: 3.57))
        bottom4Path.addLine(to: CGPoint(x: 14.47, y: 0))
        UIColor.black.setStroke()
        bottom4Path.lineWidth = 1
        bottom4Path.stroke()


        //// Bottom 5 Drawing
        let bottom5Path = UIBezierPath()
        bottom5Path.move(to: CGPoint(x: 15.52, y: 3.57))
        bottom5Path.addLine(to: CGPoint(x: 19.47, y: 0))
        UIColor.black.setStroke()
        bottom5Path.lineWidth = 1
        bottom5Path.stroke()


        //// Bottom 6 Drawing
        let bottom6Path = UIBezierPath()
        bottom6Path.move(to: CGPoint(x: 20.52, y: 3.57))
        bottom6Path.addLine(to: CGPoint(x: 24.47, y: 0))
        UIColor.black.setStroke()
        bottom6Path.lineWidth = 1
        bottom6Path.stroke()


        //// Bottom 7 Drawing
        let bottom7Path = UIBezierPath()
        bottom7Path.move(to: CGPoint(x: 25.52, y: 3.57))
        bottom7Path.addLine(to: CGPoint(x: 29.47, y: 0))
        UIColor.black.setStroke()
        bottom7Path.lineWidth = 1
        bottom7Path.stroke()


        //// Bottom 8 Drawing
        let bottom8Path = UIBezierPath()
        bottom8Path.move(to: CGPoint(x: 30.52, y: 3.57))
        bottom8Path.addLine(to: CGPoint(x: 34.47, y: 0))
        UIColor.black.setStroke()
        bottom8Path.lineWidth = 1
        bottom8Path.stroke()


        //// Bottom 9 Drawing
        let bottom9Path = UIBezierPath()
        bottom9Path.move(to: CGPoint(x: 35.52, y: 3.57))
        bottom9Path.addLine(to: CGPoint(x: 39.47, y: 0))
        UIColor.black.setStroke()
        bottom9Path.lineWidth = 1
        bottom9Path.stroke()
        
        context.restoreGState()

    }

    public dynamic class func drawRectangleMid(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 40, height: 20), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 40, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 40, y: resizedFrame.height / 20)


        //// Color Declarations
        let rectangleStroke = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)

        //// Bottom Drawing
        let bottomPath = UIBezierPath()
        bottomPath.move(to: CGPoint(x: 0, y: 0))
        bottomPath.addLine(to: CGPoint(x: 40, y: 0))
        UIColor.black.setStroke()
        bottomPath.lineWidth = 1
        bottomPath.stroke()


        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 40, height: 22.21))
        rectangleStroke.setStroke()
        rectanglePath.lineWidth = 2
        rectanglePath.lineCapStyle = .square
        rectanglePath.stroke()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 0, y: -0))
        bezierPath.addCurve(to: CGPoint(x: 0, y: 20), controlPoint1: CGPoint(x: 0, y: 17.27), controlPoint2: CGPoint(x: 0, y: 20))
        rectangleStroke.setStroke()
        bezierPath.lineWidth = 4
        bezierPath.stroke()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 40, y: -0))
        bezier2Path.addCurve(to: CGPoint(x: 40, y: 20), controlPoint1: CGPoint(x: 40, y: 17.27), controlPoint2: CGPoint(x: 40, y: 20))
        rectangleStroke.setStroke()
        bezier2Path.lineWidth = 4
        bezier2Path.stroke()
        
        context.restoreGState()

    }

    public dynamic class func drawRectangleCap(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 40, height: 20), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 40, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 40, y: resizedFrame.height / 20)


        //// Color Declarations
        let rectangleStroke = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)

        //// Bottom Drawing
        let bottomPath = UIBezierPath()
        bottomPath.move(to: CGPoint(x: 0, y: 0))
        bottomPath.addLine(to: CGPoint(x: 40, y: 0))
        UIColor.black.setStroke()
        bottomPath.lineWidth = 1
        bottomPath.stroke()


        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: -250.88, y: -75.49, width: 40, height: 22.21))
        rectangleStroke.setStroke()
        rectanglePath.lineWidth = 4
        rectanglePath.lineCapStyle = .square
        rectanglePath.stroke()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 0, y: -0))
        bezierPath.addCurve(to: CGPoint(x: 0, y: 20), controlPoint1: CGPoint(x: 0, y: 17.27), controlPoint2: CGPoint(x: 0, y: 20))
        rectangleStroke.setStroke()
        bezierPath.lineWidth = 4
        bezierPath.stroke()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 40, y: -0))
        bezier2Path.addCurve(to: CGPoint(x: 40, y: 20), controlPoint1: CGPoint(x: 40, y: 17.27), controlPoint2: CGPoint(x: 40, y: 20))
        rectangleStroke.setStroke()
        bezier2Path.lineWidth = 4
        bezier2Path.stroke()
        
        context.restoreGState()

    }

    public dynamic class func drawStackBottomFlat(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 40, height: 20), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 40, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 40, y: resizedFrame.height / 20)


        //// Bottom Drawing
        let bottomPath = UIBezierPath()
        bottomPath.move(to: CGPoint(x: 0, y: 0))
        bottomPath.addLine(to: CGPoint(x: 40, y: 0))
        UIColor.black.setStroke()
        bottomPath.lineWidth = 1
        bottomPath.stroke()
        
        context.restoreGState()

    }




    @objc public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }

            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}
