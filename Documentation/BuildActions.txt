// #  Build Actions
// This doc attempts to consolidate all actions performed when a particular button is pressed. 

/*
Excluding debugging, the three main build actions are...
      1. Assemble Source (parse asmb code and generate object code / listing)
      2. Load Object (convert object code (hex) into dec ints and place into memory)
      3. Execute (start the simulator at the top of memory)

The remaining Build actions are composites of the above three:
    * Run Source (assemble, load, execute)
    * Run Object (load and execute)
*/


// =========================== When the `Assemble` Button (aka Hammer Button) is Pressed... ===========================

// In mainwindow.cpp:

if (assemble()) {
    ui->statusbar->showMessage("Assembly succeeded", 4000);
}

bool MainWindow::assemble() {
    Pep::memAddrssToAssemblerListing = &Pep::memAddrssToAssemblerListingProg;
    Pep::listingRowChecked = &Pep::listingRowCheckedProg;
    Pep::burnCount = 0;
    if (sourceCodePane->assemble()) {
        if (Pep::burnCount > 0) {
            // checking for burn count here instead of in the assembler, probably so the sourceCodePane.assemble() can be used for assembling operating systems, too?
            QString errorString = ";ERROR: .BURN not allowed in program unless installing OS.";
            sourceCodePane->appendMessageInSourceCodePaneAt(0, errorString);
            assemblerListingPane->clearAssemblerListing();
            objectCodePane->clearObjectCode();
            listingTracePane->clearListingTrace();
            ui->pepCodeTraceTab->setCurrentIndex(0); // Make source code pane visible
            return false;
        }
        
        // no .BURN in sourceCodePane
        objectCodePane->setObjectCode(sourceCodePane->getObjectCode());
        assemblerListingPane->setAssemblerListing(sourceCodePane->getAssemblerListingList());
        listingTracePane->setListingTrace(sourceCodePane->getAssemblerListingList(), sourceCodePane->getHasCheckBox());
        memoryTracePane->setMemoryTrace();
        listingTracePane->showAssemblerListing();
        
        // I removed some file setting things that are irrelevant for our purposes
        
        // enable format from listing and debugging
        ui->actionEdit_Format_From_Listing->setEnabled(true);
        ui->actionBuild_Start_Debugging_Source->setEnabled(true);
        
        
        // if there is no trace tag warning and at least one of the following fields in Pep is populated, show the memory trace.
        if (!Pep::traceTagWarning && !(Pep::blockSymbols.isEmpty()
                                       && Pep::equateSymbols.isEmpty()
                                       && Pep::globalStructSymbols.isEmpty()
                                       && Pep::symbolFormat.isEmpty()
                                       && Pep::symbolFormatMultiplier.isEmpty())) {
            memoryTracePane->show();
        }
        else {
            memoryTracePane->hide();
        }
        
        return true;
    }
    
    
    // if you get here, the assembly failed
    assemblerListingPane->clearAssemblerListing();
    objectCodePane->clearObjectCode();
    listingTracePane->clearListingTrace();
    ui->pepCodeTraceTab->setCurrentIndex(0); // Make source code pane visible
    return false;
}




// In sourcecodepane.h ...

private:
    QList<Code *> codeList;
    QList<int> objectCode;
    QStringList assemblerListingList;
    QStringList listingTraceList;
    QList<bool> hasCheckBox;

bool assemble();
// Pre: The source code pane contains a Pep/9 source program.
// Post: If the program assembles correctly, true is returned, and codeList is populated
// with the code objects. Otherwise false is returned and codeList is partially populated.
// Post: Pep::symbolTable is populated with values not adjusted for .BURN.
// Post: Pep::byteCount is the byte count for the object code not adjusted for .BURN.
// Post: Pep::burnCount is the number of .BURN instructions encountered in the source program.


// And in sourcecodepane.cpp...

bool SourceCodePane::assemble() {
    QString sourceLine;
    QString errorString;
    QStringList sourceCodeList;
    Code *code;
    int lineNum = 0;
    bool dotEndDetected = false;

    removeErrorMessages();
    Asm::listOfReferencedSymbols.clear();
    Asm::listOfReferencedSymbolLineNums.clear();
    Pep::memAddrssToAssemblerListing->clear();
    Pep::symbolTable.clear();
    Pep::adjustSymbolValueForBurn.clear();
    Pep::symbolFormat.clear();
    Pep::symbolFormatMultiplier.clear();;
    Pep::symbolTraceList.clear(); // Does this clear the lists within the map?
    Pep::globalStructSymbols.clear();
    Pep::blockSymbols.clear();
    Pep::equateSymbols.clear();
    // delete all of codeList
    while (!codeList.isEmpty()) {
        delete codeList.takeFirst();
    }
    QString sourceCode = ui->textEdit->toPlainText();
    sourceCodeList = sourceCode.split('\n');
    Pep::byteCount = 0;
    Pep::burnCount = 0;
    
    // go through the [String] representation of the source code, calling Asm.processSourceLine on each one.
    while (lineNum < sourceCodeList.size() && !dotEndDetected) {
        sourceLine = sourceCodeList[lineNum];
        if (!Asm::processSourceLine(sourceLine, lineNum, code, errorString, dotEndDetected)) {
            appendMessageInSourceCodePaneAt(lineNum, errorString);
            return false;
        }
        codeList.append(code);
        lineNum++;
    }
    
    // check for .end
    if (!dotEndDetected) {
        errorString = ";ERROR: Missing .END sentinel.";
        appendMessageInSourceCodePaneAt(0, errorString);
        return false;
    }
    
    // check size
    if (Pep::byteCount > 65535) {
        errorString = ";ERROR: Object code size too large to fit into memory.";
        appendMessageInSourceCodePaneAt(0, errorString);
        return false;
    }
    
    // check for unused symbols
    for (int i = 0; i < Asm::listOfReferencedSymbols.length(); i++) {
        if (!Pep::symbolTable.contains(Asm::listOfReferencedSymbols[i])
                && !(Asm::listOfReferencedSymbols[i] == "charIn")
                && !(Asm::listOfReferencedSymbols[i] == "charOut")) {
            errorString = ";ERROR: Symbol " + Asm::listOfReferencedSymbols[i] + " is used but not defined.";
            appendMessageInSourceCodePaneAt(Asm::listOfReferencedSymbolLineNums[i], errorString);
            return false;
        }
    }
    // check for format trace tags
    Pep::traceTagWarning = false;
    for (int i = 0; i < codeList.size(); i++) {
        if (!codeList[i]->processFormatTraceTags(lineNum, errorString)) {
            appendMessageInSourceCodePaneAt(lineNum, errorString);
            Pep::traceTagWarning = true;
        }
    }
    
    // check for symbol trace tags
    if (!Pep::traceTagWarning && !(Pep::blockSymbols.isEmpty() && Pep::equateSymbols.isEmpty())) {
        for (int i = 0; i < codeList.size(); i++) {
            if (!codeList[i]->processSymbolTraceTags(lineNum, errorString)) {
                appendMessageInSourceCodePaneAt(lineNum, errorString);
                Pep::traceTagWarning = true;
            }
        }
    }
    return true;
}



/* 
_____ Notes on the assemble routine _______

* What is Pep?
* Asm is the assembler
* The sourcecodepane does more than the ASM_SourceViewController should
Alternative Structure:

* A sourceVC, objectVC and listingVC, each of which has a ref to the ProjectModel (see next bullet)

* One model for the source, object, and listing as PLAIN TEXT, provides interaction with fs (save, load, fsState, etc.)
    * Closest model to the user
    * The source, object, and listing VCs push/pull updates to/from this model
    * We could call this the ProjectModel, TextModel, etc.
    * Could move fs interaction to another model, but that might be overkill
    * Stores the contents of the 3 textFields in a centralized location

* One model for the source, object, and listing as ARRAYS of Code, Int, and String objects, respectively.
    * This handles the assembler side of things
    * combine SourceCodePane::assemble() and Asm::assemble()
    * possible names: AssemblerModel, AsmModel, Assembler, Asm, etc.
    * when an assemble is triggered in ASM_DetailVC, this function grabs the latest source text from 
        the ProjectModel and assembles it, returns true or false -- the VC then recieves the boolean and responds accordingly
*/





// ============================== When the `Load` Button is Pressed =================================

// In mainwindow.cpp...
void MainWindow::on_actionBuild_Load_triggered() {
    if (load()) {
        ui->statusbar->showMessage("Load succeeded", 4000);
    }
    else {
        ui->statusbar->showMessage("Load failed", 4000);
    }
}

bool MainWindow::load() {
    QList<int> objectCodeList;
    if (objectCodePane->getObjectCode(objectCodeList)) {
        Sim::loadMem(objectCodeList);
        memoryDumpPane->refreshMemoryLines(0, objectCodeList.size());
        return true;
    }
    return false;
}


// In objectcodepane.h...
bool getObjectCode(QList<int> &objectCodeList);
// Pre: The object code pane contains object code
// Post: If the object code is syntactically correct, true is returned, and
// &objectCodeList contains the object code, one byte per integer.
// Otherwise, false is returned.


// In objectcodepane.cpp...
bool ObjectCodePane::getObjectCode(QList<int> &objectCodeList)  {
    QString objectString = ui->textEdit->toPlainText();
    while (objectString.length() > 0) {
        // check for object sentinel (zz)
        // interesting that the check here is just for the last two characters being <anything>z
        if (objectString.at(1) == QChar('z')) {
            return true;
        }
        // check for non-existent program or return false if the above check fails with 2 chars remaining
        if (objectString.length() < 3) {
            return false;
        }
        QString s = objectString.left(2); // Get the two-char hex number
        // does the line below mean that the object code AAB001ACzz doesn't work, even if AA B0 01 AC zz does?
        // just tried it, and it doesn't work.  
        // Why do it this way?  Couldn't we replace all instances of " " with an empty string?
        objectString.remove(0, 3); // Removes the number and trailing whitespace
        
        // convert the two-character string from base 16 to a single base-10 Int, and append objectCodeList
        bool ok;
        objectCodeList.append(s.toInt(&ok, 16));
        if (!ok) {
            return false;
        }
    }
    // if you get here, the object code is syntactically incorrect
    return false;
}


// In sim.cpp...
void Sim::loadMem(QList<int> objectCodeList) {
    // straightforward
    for (int i = 0; objectCodeList.length() > 0; i++) {
        Mem[i] = objectCodeList.takeAt(0);
    }
}




// ============================== When the `Execute` Button is Pressed =================================
// In mainwindow.cpp...
void MainWindow::on_actionBuild_Execute_triggered() {
    cpuPane->clearCpu();
    Sim::stackPointer = Sim::readWord(Pep::dotBurnArgument - 11);
    // 11 is the vector offset from the last byte of the OS for the User stack pointer
    
    // pc back to 0
    Sim::programCounter = 0x0000;
    setDebugState(true);
    Sim::trapped = false;
    cpuPane->runClicked();
    sourceCodePane->setReadOnly(true);
    objectCodePane->setReadOnly(true);
    
    // set the i/o mode depending on the segmented controller's current idx
    if (ui->pepInputOutputTab->currentIndex() == 0) {
        ui->pepInputOutputTab->setTabEnabled(1, false);
        outputPane->clearOutput();
        QString s = inputPane->toPlainText();
        if (!s.endsWith("\n")) {
            s.append("\n");
        }
        Sim::inputBuffer = s;
        cpuPane->runWithBatch();
    }
    else {
        ui->pepInputOutputTab->setTabEnabled(0, false);
        Sim::inputBuffer.clear();
        terminalPane->clearTerminal();
        cpuPane->runWithTerminal();
    }
    // Other things may go here.
}



// In cpupane.h...
void setDebugState(bool b);
// Post: if b is true, checkboxes are set to disabled, and vice versa

void runClicked();
// Post: All of the debug checkboxes are unclicked

void runWithBatch();
// Runs the simulator through with batch input

void runWithTerminal();
// Runs the simulator through with terminal i/o



// In cpupane.cpp...
void CpuPane::runWithBatch() {
    isCurrentlySimulating = true;
    interruptExecutionFlag = false;
    QString errorString;
    while (true) {
        qApp->processEvents(); // To make sure that the event filter gets to handle keypresses during the run
        if (Sim::vonNeumannStep(errorString)) {
            emit vonNeumannStepped();
            if (Sim::outputBuffer.length() == 1) {
                emit appendOutput(Sim::outputBuffer);
                Sim::outputBuffer = "";
            }
        }
        else {
            QMessageBox::warning(0, "Pep/9", errorString);
            updateCpu();
            emit executionComplete();
            isCurrentlySimulating = false;
            return;
        }
        if (Pep::decodeMnemonic[Sim::instructionSpecifier] == Enu::STOP) {
            updateCpu();
            emit executionComplete();
            isCurrentlySimulating = false;
            return;
        }
        if (interruptExecutionFlag) {
            updateCpu();
            isCurrentlySimulating = false;
            return;
        }
    }
}



void CpuPane::runWithTerminal() {
    isCurrentlySimulating = true;
    waiting = Enu::ERunWaiting;
    interruptExecutionFlag = false;
    QString errorString;
    while (true) {
        qApp->processEvents(); // To make sure that the event filter gets to handle keypresses during the run
        if (Sim::inputBuffer.isEmpty() && willAccessCharIn())
        {
            // we are waiting for input
            updateCpu();
            emit waitingForInput();
            isCurrentlySimulating = false;
            return;
        }
        else {
            if (Sim::vonNeumannStep(errorString)) {
                emit vonNeumannStepped();
                if (Sim::outputBuffer.length() == 1) {
                    emit appendOutput(Sim::outputBuffer);
                    Sim::outputBuffer = "";
                }
            }
            else {
                QMessageBox::warning(0, "Pep/9", errorString);
                updateCpu();
                emit executionComplete();
                isCurrentlySimulating = false;
                return;
            }
            if (Pep::decodeMnemonic[Sim::instructionSpecifier] == Enu::STOP) {
                updateCpu();
                emit executionComplete();
                isCurrentlySimulating = false;
                return;
            }
            if (interruptExecutionFlag) {
                updateCpu();
                emit updateSimulationView();
                isCurrentlySimulating = false;
                return;
            }
        }
    }
}







// =============================== Taking a look at the composite actions ==============================



// ____When the `Run Source` Button (aka Play Button) is Pressed____
/* A composite action consisting of assemble(), load(), and execute() */
void MainWindow::on_actionBuild_Run_Source_triggered() {
    if (assemble() && load()) {
        on_actionBuild_Execute_triggered();
    }
}




// ____When the `Run Object` Button is Pressed____
/* A composite action consisting of load() and execute() */
void MainWindow::on_actionBuild_Run_Object_triggered() {
    if (load()) {
        ui->statusbar->showMessage("Load succeeded", 4000);
        on_actionBuild_Execute_triggered();
    }
    else {
        ui->statusbar->showMessage("Load failed", 4000);
    }
}








